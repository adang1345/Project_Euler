"""Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and
are generated by the following formulae:

Triangle	 	P(3,n)=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	    P(4,n)=n^2	 	    1, 4, 9, 16, 25, ...
Pentagonal	 	P(5,n)=n(3n-1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	P(6,n)=n(2n-1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P(7,n)=n(5n-3)/2	1, 7, 18, 34, 55, ...
Octagonal	 	P(8,n)=n(3n-2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the
last number with the first).
Each polygonal type: triangle (P(3,127)=8128), square (P(4,91)=8281), and pentagonal (P(5,44)=2882), is represented by a
different number in the set.
This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square,
pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set."""


def first_digits(n):
    """Return the first 2 digits of n. Assume that n is a 4-digit integer."""
    return int(str(n)[:2])


def last_digits(n):
    """Return the last 2 digits of n. Assume that n is a 4-digit integer."""
    return int(str(n)[-2:])


def contains_all(l):
    """Return True if list l contains at least 1 of each polygonal number from pentagonal to octagonal."""
    b = [0, 0, 0, 0, 0, 0]
    for x in l:
        b[0] += bool(x in triangle_numbers)
        b[1] += bool(x in square_numbers)
        b[2] += bool(x in pentagonal_numbers)
        b[3] += bool(x in hexagonal_numbers)
        b[4] += bool(x in heptagonal_numbers)
        b[5] += bool(x in octagonal_numbers)
    return all(b) > 0


# make lists of figurate numbers in range 1010..9999 for which the tens digit is not 0

triangle_numbers = []
for n in range(45, 141):
    candidate = n * (n + 1) // 2
    if candidate % 10 != candidate % 100:
        triangle_numbers.append(candidate)

square_numbers = []
for n in range(32, 100):
    candidate = n ** 2
    if candidate % 10 != candidate % 100:
        square_numbers.append(candidate)

pentagonal_numbers = []
for n in range(27, 82):
    candidate = n * (3 * n - 1) // 2
    if candidate % 10 != candidate % 100:
        pentagonal_numbers.append(candidate)

hexagonal_numbers = []
for n in range(23, 71):
    candidate = n * (2 * n - 1)
    if candidate % 10 != candidate % 100:
        hexagonal_numbers.append(candidate)

heptagonal_numbers = []
for n in range(21, 64):
    candidate = n * (5 * n - 3) // 2
    if candidate % 10 != candidate % 100:
        heptagonal_numbers.append(candidate)

octagonal_numbers = []
for n in range(19, 59):
    candidate = n * (3 * n - 2)
    if candidate % 10 != candidate % 100:
        octagonal_numbers.append(candidate)

polygonal_numbers_except_octagonal = triangle_numbers + square_numbers + pentagonal_numbers + hexagonal_numbers + \
                                     heptagonal_numbers

candidate_answers = set()
for n1 in octagonal_numbers:
    for n2 in polygonal_numbers_except_octagonal:
        if last_digits(n1) == first_digits(n2):
            for n3 in polygonal_numbers_except_octagonal:
                if last_digits(n2) == first_digits(n3):
                    for n4 in polygonal_numbers_except_octagonal:
                        if last_digits(n3) == first_digits(n4):
                            for n5 in polygonal_numbers_except_octagonal:
                                if last_digits(n4) == first_digits(n5):
                                    for n6 in polygonal_numbers_except_octagonal:
                                        if last_digits(n5) == first_digits(n6) and last_digits(n6) == first_digits(n1):
                                            candidate_answers.add((n1, n2, n3, n4, n5, n6))

candidate_answers = [list(x) for x in candidate_answers if contains_all(x)]
print(candidate_answers)

# Candidate answers are the following and are checked manually:
# [2821, 2116, 1617, 1782, 8281, 8128], WRONG
# [4720, 2025, 2512, 1225, 2512, 1247], WRONG
# [1281, 8128, 2882, 8256, 5625, 2512], CORRECT
# [4033, 3364, 6426, 2673, 7315, 1540],
# [2821, 2116, 1651, 5192, 9211, 1128],
# [4720, 2025, 2556, 5625, 2512, 1247]

print(sum([1281, 8128, 2882, 8256, 5625, 2512]))
